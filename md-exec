#!/bin/bash
# remember to call "./addapps .getver" after version modifications!
VERSION="1.0.2"


show_help() {
  MD_FILE="./new-file.md"
  if [ "$1" != "" ] ; then
    MD_FILE="$1"
  fi
  echo ""
  echo "# usage: $(basename $0) <md-file> [-e|--envsubst] show|list|run|create [section] [-o <var>=<val>].."
  echo ""
  echo ""
  echo "# example:"
  echo ""
  echo "`basename $0` ${MD_FILE} list     # list available sections"
  echo "`basename $0` ${MD_FILE} run      # execute sections"
  echo "`basename $0` ${MD_FILE} show     # show relevant sections for run command"
  echo "`basename $0` ${MD_FILE} dump     # dump a section"
  echo "`basename $0` ${MD_FILE} dump -e  # dump a section and substitute values which are defined in global section"
  echo "`basename $0` ${MD_FILE} create   # create template md file"
  echo ""
  echo ""
  echo "`basename $0` ${MD_FILE} run          # execute all sections"
  echo "`basename $0` ${MD_FILE} run  create  # execute 'create' section"
  echo "`basename $0` ${MD_FILE} run  test    # execute 'test'   section"
  echo "`basename $0` ${MD_FILE} run  delete  # execute 'delete' section"
  echo "`basename $0` ${MD_FILE} dump create  # dump 'create' section"
  echo "`basename $0` ${MD_FILE} dump test    # dump 'test'   section"
  echo "`basename $0` ${MD_FILE} dump delete  # dump 'delete' section"
  echo ""
  echo "# overwrite variable values:"
  echo ""
  echo "`basename $0` ${MD_FILE} run                   # use values from md-file"
  echo "`basename $0` ${MD_FILE} run -o X=\"new value\"  # overwrite value"
  echo ""
  echo ""
}

declare -A opt_args
opt_envsubst=0

####################################################################################
# magic main
####################################################################################

CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)      show_help        ; exit 0 ;;
    -v|--version)   echo "$VERSION"  ; exit 0 ;;
    -o|--overwrite) opt_args+=($2)   ; shift  ;;
    -e|--envsubst)  opt_envsubst=1   ; shift  ;;
    *)   CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

function xxx()
{
options=$(getopt -l "help,version,overwrite" -o "hvoe:" -a -- "$@")
eval set -- "$options"
while true ; do
  case "$1" in
  -h|--help)
    show_help
    exit 0
    ;;
  -v|--version)
    echo "$VERSION"
    exit 0
    ;;
  -o|--overwrite)
    opt_args+=($2)
    ;;
  -e)
    opt_envsubst=1
    shift
    ;;
  --)
    shift
    break;;
  esac
  shift
done

#echo "$@"
}

if [ "$1" = "" ] ; then
  show_help
  exit 0
fi
if [ "$2" = "" ] ; then
  show_help "$1"
  exit 0
fi


FI="$1"
if [ "$2" = "create" ] ; then
  if [ -f $FI ] ; then
    echo "error: file already exist"
    exit 1
  fi
  cat >$FI <<EOF
# md-exec template

[//]: # (md-exec: global)
\`\`\`global
X="my_global_var"
echo "set global variables"
\`\`\`

[//]: # (md-exec: create test env)
\`\`\`create
echo "execute create with X=\$X"
\`\`\`

[//]: # (md-exec: execute test)
\`\`\`test
echo "execute test with X=\$X"
\`\`\`

[//]: # (md-exec: delete test env)
\`\`\`delete
echo "execute delete with X=\$X"
\`\`\`
EOF
  echo ""
  echo "$FI created"
  echo ""
  exit 0
fi
  
if [ "$FI" = "" -o ! -f "$FI" ] ; then
  echo "error: file <$FI> does not exist!"
  exit 1
fi
CMD="$2"
if [ "$CMD" != "run" -a "$CMD" != "show" -a "$CMD" != "list" -a "$CMD" != "dump"  ] ; then
  echo "error unkown command given"
  exit 1
fi
TAG="$3"

script=$(mktemp)

D2U='s/\r$//g'              # dos2unix
RML='/```.*/d'              # remove lines with ```
EMPTY='/^[[:space:]]*$/d'   # remove empty lines
RMT='s|```||g'              # remove ````
RMC='/^[[:blank:]]*#/d;s/#.*//' # remove all comments

#                            section global          

ret=0
if [ "$TAG" = "" ] ; then
  if [ "$CMD" = "show" ] ; then
    cat $FI | sed $D2U | sed  -n '/```/,/```/p'                                | sed $EMPTY > $script
  elif [ "$CMD" = "list" ] ; then
    cat $FI | sed $D2U | grep "\`\`\`.*" | sed $RMT                            | sed $EMPTY > $script
  else
    cat $FI | sed $D2U | sed  -n '/```/,/```/p' | sed $RML                     | sed $EMPTY > $script
  fi
else
  if [ "$CMD" = "show" ] ; then
    cat $FI | sed $D2U | sed  -n '/```global$\|```'$TAG'$/,/```/p'            | sed $EMPTY > $script
  elif [ "$CMD" = "dump" ] ; then
    cat $FI | sed $D2U | sed  -n '/```'$TAG'$/,/```/p' | sed $RML                          > $script
  else 
    cat $FI | sed $D2U | sed  -n '/```global$\|```'$TAG'$/,/```/p' | sed $RML | sed $EMPTY > $script
  fi
fi

for arg in "${!opt_args[@]}" ; do
  var=${arg%=*}
  val=${arg#*=}
  sed -i "/^[[:blank:]]*${var}=*/c\\${var}=\"${val}\"" $script
done
if [ "$CMD" = "list" -o "$CMD" = "show" -o "$CMD" = "dump" ] ; then
  if [ "$CMD" = "dump" -a "$opt_envsubst" = "1" ] ; then
    export $(cat $FI | sed $D2U | sed  -n '/```'global'$/,/```/p' | sed $RML  | sed $EMPTY | sed $RMC | sed 's|"||g' | xargs -0)
    cat $script | envsubst
  else
    cat $script
  fi
fi
if [ "$CMD" = "run" ] ; then
  chmod a+x $script
  $script  
  ret=$?
fi
rm $script
exit $ret
